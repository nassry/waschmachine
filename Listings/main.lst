C51 COMPILER V9.60.0.0   MAIN                                                              05/22/2022 08:09:42 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE MODP2 DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          //************************************************
   2          // Deklaration
   3          //************************************************
   4          
   5          #include <xc866.h>
   6          
   7          // ADC-Funktionen:
   8              extern void adc_init(void);
   9              extern unsigned int adc_in(unsigned char kanal);
  10          
  11          // LCD Funktionen:
  12              extern void lcd_init(void);         // Init LCD
  13              extern void lcd_clr(void);          // LCD Löschen 
  14          
  15              extern void lcd_str(char *ptr);     // Ausgabe String
  16              extern void lcd_curs(char);         // Cursor setzen
  17              extern void asc_out(char);          // Ausgabe eines ASCII Zeichens
  18              extern void lcd_int(unsigned int);  // Ausgabe Int Wert => 4 stellig
  19             
  20          // Texte:
  21              unsigned char Waus[]="Maschine Aus";    // LCD-Text Waschmaschine Aus
  22              unsigned char Wan[]="Maschine An ";     // LCD-Text Waschmaschine An
  23              unsigned char WS3[]="Wasser bis S3";    // LCD-Text Wasserzulauf bis S3
  24              unsigned char Han[]="H An";             // LCD-Text Heizung An
  25              unsigned char Hau[]="H Aus";            // LCD-Text Heizun Aus
  26              unsigned char Man[]="Mtr An";           // LCD-Text Motor An
  27              unsigned char temp[]="Temp. zu hoch";     // LCD-Text Motor An
  28              unsigned char def[]="Fehler";           // LCD-Text Fehler
  29          
  30          // Eigene Funktionen:
  31              void init (void);
  32              void waschgang (void);
  33              void teiler (void);             // Teilen in einzelne Ziffer
  34              void timer (void);              // 5.461 msec. 
  35              void zustand (void);            // LCD-Anzeige
  36          
  37          // Variablen:
  38              sbit S1 = P0_DATA^5;    // (Schalter)Hauptschalter - Interruptbetrieb EXT0
  39              sbit S2 = P3_DATA^1;    // (Sensor)Temperatur Schalter
  40              sbit S3 = P3_DATA^2;    // (Sensor)Fühlstand erreicht
  41              sbit S4 = P3_DATA^3;    // (Sensor)Füllstand überschritten
  42              sbit S5 = P3_DATA^4;    // (Signal) benutzer Anwahl 60 grad
  43              sbit S6 = P3_DATA^5;    // (Signal) benutzer Anwahl 90 grad
  44          
  45              unsigned int Y;         // (Steuersignal) Wasserzulauf
  46              unsigned int H;         // (Steuersignal) Heizung
  47              unsigned int M;         // (Steuersignal) Motor
  48              unsigned int start;     // (Steuersignal) Start
  49              unsigned int Ende;      // (Steuersignal) Ende      
  50              unsigned int p;         // (Variable) 10sek.
  51              unsigned int anzeige;   // (Variable) LCD-Anzeige
  52          
  53              unsigned long temperatur_10;      // Temperatur 10_bit
  54              unsigned long temperatur_500;     // Temperatur 0-50,0°C
C51 COMPILER V9.60.0.0   MAIN                                                              05/22/2022 08:09:42 PAGE 2   

  55          
  56          //************************************************
  57          // Main
  58          //************************************************
  59          
  60          void main (void)
  61          {
  62   1        init ();
  63   1        while(1)
  64   1        {
  65   2          teiler();
  66   2          zustand();
  67   2          start = 1;
  68   2          anzeige = 1;
  69   2          P1_DATA = 0x00;             //  Wasserzulauf(P1.2) (Y) schließen nach Timer-Interrupt 
  70   2          while (temperatur_500 >= 300)
  71   2          {
  72   3            while (temperatur_500 >= 270)
  73   3            {
  74   4              teiler ();
  75   4              start = 0;
  76   4              anzeige = 6;
  77   4              zustand();
  78   4            }
  79   3          }
  80   2          if (S1==1)
  81   2          { 
  82   3            anzeige = 0;
  83   3            if (start == 1)
  84   3            {
  85   4            EA = 1;
  86   4            Ende = 0;
  87   4            waschgang();
  88   4            }
  89   3          }
  90   2        }
  91   1      }
  92          
  93          //************************************************
  94          // Funktionen
  95          //************************************************
  96          
  97          void waschgang (void)     // Funktion Waschgang
  98          {
  99   1        if (S3 == 1)            // Wenn Signal 1 an S3; Füllstand erreicht
 100   1        {
 101   2          P1_DATA =0x00;        // Wasserzulauf(P1.2) (Y) schließen
 102   2          if (S2 == 0)          // Wenn Wahlschaler (P3.1); Signal 0 an S2; Temperatur 60°C
 103   2          {
 104   3            if (S6 == 1)        // Wenn Signal 1 an S6; Temperatur 60°C erreicht
 105   3            {
 106   4            P1_DATA = 0x00;     // Heizung(P1.3) aus; Heizung H ausschalten wenn 60°C erreicht sind
 107   4            anzeige = 4;        // LCD-Text Heizung aus
 108   4            P0_DATA = 0x08;     // Motor (P0.3) ein;  Motor M einschalten sobald Signal 1 an S3; Füllstand erreicht
 109   4            anzeige = 5;        // LCD-Text Motor an
 110   4            TR0 = 1;            // Steuerbit für Zähler/Zeitgeber 0
 111   4            }
 112   3            else                // Sonst
 113   3            {
 114   4            P1_DATA = 0x08;     // Heizung(P1.3) ein; Heizung einschalten, wenn Temperatur unter 60°C sinkt
 115   4            anzeige = 3;        // LCD-Text Heizung an
 116   4            P0_DATA = 0x08;     // Motor (P0.3) ein;  Motor M ist weiterhin an
C51 COMPILER V9.60.0.0   MAIN                                                              05/22/2022 08:09:42 PAGE 3   

 117   4            anzeige = 5;        // LCD-Text Motor an
 118   4            }
 119   3          }
 120   2          else                  // Sonst
 121   2          {
 122   3            if (S5 == 1)        // Signal 1 an S5; Temperatur 90°C erreicht          
 123   3            {
 124   4            P1_DATA = 0x00;     // Heizung(P1.3) aus; Heizung H ausschalten wenn 90°C erreicht sind
 125   4            anzeige = 4;        // LCD-Text Heizung aus
 126   4            P0_DATA = 0x08;     // Motor (P0.3) ein;  Motor M einschalten sobald Signal 1 an S3; Füllstand erreicht
 127   4            anzeige = 5;        // LCD-Text Motor an
 128   4            TR0 = 1;            // Steuerbit für Zähler/Zeitgeber 0
 129   4            }
 130   3            else                // Sonst
 131   3            {
 132   4            P1_DATA = 0x08;     // Heizung(P1.3) ein; Heizung einschalten, wenn Temperatur unter 90°C sinkt
 133   4            anzeige = 4;        // LCD-Text Heizung an
 134   4            P0_DATA = 0x08;     // Motor (P0.3) ein;  Motor M ist weiterhin an
 135   4            anzeige = 5;        // LCD-Text Motor an
 136   4            }
 137   3          }   
 138   2        }
 139   1        else                    // Sonst
 140   1          {
 141   2          P1_DATA = 0x04;       // Wasserzulauf(P1.2) (Y) öffnen
 142   2          anzeige = 2;          // Anzeige Wasserzulauf
 143   2          }
 144   1      } 
 145          
 146          void init (void)
 147          {
 148   1        lcd_init();       // Initiierung des Bildschirms
 149   1        lcd_clr();        // Löschen des Bildschirms
 150   1        
 151   1        P0_DIR = 0x18;    // Port 0; P0.5 als Eingang, P0.4 und P0.3 als Ausgang
 152   1        P1_DIR = 0xFF;    // Port 1; alles als Ausgang
 153   1        P3_DIR = 0x00;    // Port 3; alles als Eingang
 154   1        
 155   1        P0_DATA = 0x00;   // Port 0; Datenausgabe
 156   1        P1_DATA = 0x00;   // Port 1; Datenausgabe
 157   1        P3_DATA = 0x00;   // Port 3; Datenausgabe
 158   1        
 159   1        TMOD = 0x11;      // Timer 0 initialisiert; 16 Bit Zähler/Zeitgeber
 160   1        
 161   1        adc_init();       // ADC initialisieren
 162   1        
 163   1        //Interrupt
 164   1        IP = 1;           // Ex. Int 0 auf höchste Prioritätebene
 165   1        EXICON0=0x00;     // FallEnde Flanken
 166   1        IT0= 0;           // FallEnde Flanken 2-ter Freigabe
 167   1        EX0 = 1;          // Ext. 0 Freigabe
 168   1        ET0 = 1;          // Timer 0 Freigabe
 169   1        EA = 1;           // Globale Freigabe
 170   1      }
 171          
 172          void teiler (void)
 173          {
 174   1        temperatur_10 = adc_in(4);
 175   1        temperatur_500 = ( 500 * temperatur_10 ) / 1024 ;     // In temperatur_500 konvertieren
 176   1      }
 177          
 178          //void print (void)
C51 COMPILER V9.60.0.0   MAIN                                                              05/22/2022 08:09:42 PAGE 4   

 179          //{
 180          //  teiler ();
 181          //  lcd_curs(1);              // Cursor auf Position 1 setzen
 182          //  lcd_str("Temperatur: ");
 183          //  asc_out(0x30 + H);        // Ausgabe H
 184          //  asc_out(0x30 + Z);        // Ausgabe Z
 185          //  lcd_str(",");
 186          //  asc_out(0x30 + E);        // Ausgabe E
 187          //  lcd_str("°C");
 188          //  lcd_str("Start : ");
 189          //  asc_out(0x30 + start);
 190          //}
 191          
 192          void timer (void)
 193          {
 194   1        TF0 = 0;                // Timer-Flag auf 0 - bitaddresiert
 195   1        TL0 = 0x00;             // Erste 8-binare - bitadresiert (start)
 196   1        TH0 = 0x00;             // Zweite 8-binare - bitadresiert
 197   1        TR0 = 1;                // Timer 0 starten - bitadresiert 
 198   1        while (TF0 == 0);
 199   1        TR0 = 0;                // Timer 0 stoppt - bitadressiert
 200   1      }
 201          
 202          void interrupt_switch_0 (void) interrupt 0
 203          {
 204   1        Ende = 1;
 205   1        ET0 = 0;                // Timer 0 Freigabe löschen
 206   1        TR0 = 0;                // Timer 0 stoppt
 207   1        P1_DATA = 0x00;         // Heizung (P1.3)aus
 208   1        P0_DATA = 0x00;         // Motor (P0.3) aus
 209   1        P1_DATA = 0x10;         // Pumpe (P1.4) an
 210   1        for(p=0; p<1831; p++)   // Warten-Funktion Pumpe für 10sek.
 211   1          {
 212   2            timer();
 213   2          }
 214   1        P1_DATA = 0x00;         // Pumpe (P1.4) aus
 215   1        while(S1==0); 
 216   1        IRCON0=0x00;
 217   1        TF0 = 0;                // Timer Flag 0
 218   1        if (Ende == 1)
 219   1          {
 220   2            TR0 = 1;
 221   2            return;
 222   2          }
 223   1      }
 224          
 225          void interrupt_timer_0 (void) interrupt 1
 226          {
 227   1        Ende = 1;
 228   1        ET0 = 0;                // Timer 0 Freigabe löschen
 229   1        TR0 = 0;                // Timer 0 stoppt
 230   1        for(p=0; p<1860; p++)   // Warten-Funktion Pumpe für 10sek.
 231   1          {
 232   2            timer();
 233   2            waschgang();
 234   2          }
 235   1        P0_DATA = 0x18;         // MSchleudern (P0.4) und Motor (P0.3) an
 236   1        P1_DATA = 0x10;         // Pumpe (P1.4) an
 237   1        for(p=0; p<1860; p++)   // Warten-Funktion Pumpe für 10sek.
 238   1        {
 239   2          timer();
 240   2        }
C51 COMPILER V9.60.0.0   MAIN                                                              05/22/2022 08:09:42 PAGE 5   

 241   1        P1_DATA = 0x00;         // Pumpe (P1.4) aus
 242   1        for(p=0; p<1860; p++)   // Warten-Funktion Pumpe für 10sek.
 243   1        {
 244   2          timer();
 245   2        }
 246   1        P0_DATA = 0x00;         // MSchleudern (P0.4) und Motor (P0.3) aus
 247   1        TF0 = 0;                // Timer Flag 0
 248   1        ET0 = 1;                // Timer 0 interruptbetrieb-Freigabe
 249   1        EA = 0;                 // Freigabe zurücksetzen
 250   1        while(S1==1);           // Programm Neustart
 251   1        IRCON0=0x00;            // Flag zurücksetzen; durch Ausschalten betätigt.
 252   1      }
 253          
 254          void zustand (void)
 255          {
 256   1        switch(anzeige)
 257   1        {
 258   2          case 0:
 259   2            lcd_curs(3);        // Cursor auf Position 1 setzen
 260   2            lcd_str(Wan);       // LCD-Text Waschmaschine an
 261   2            break;              // Abschluss
 262   2          case 1:
 263   2            lcd_curs(3);        // Cursor auf Position 1 setzen
 264   2            lcd_str(Waus);      // LCD-Text Waschmaschine aus
 265   2            break;              // Abschluss
 266   2          case 2:
 267   2            lcd_curs(23);       // Cursor auf Position 1 setzen
 268   2            lcd_str(WS3);       // LCD-Text Wasserzulauf bis S3
 269   2            break;              // Abschluss
 270   2          case 3:
 271   2            lcd_curs(63);       // Cursor auf Position 1 setzen
 272   2            lcd_str(Han);       // LCD-Text Heizung an
 273   2            break;              // Abschluss
 274   2          case 4:               // Auskommentiert, da Speicher zu klein
 275   2            lcd_curs(63);       // Cursor auf Position 1 setzen
 276   2            lcd_str(Hau);       // LCD-Text Heizung an
 277   2            break;              // Abschluss
 278   2          case 5:               // Auskommentiert, da Speicher zu klein
 279   2            lcd_curs(43);       // Cursor auf Position 1 setzen
 280   2            lcd_str(Man);       // LCD-Text Motor an
 281   2            break;              // Abschluss
 282   2          case 6:
 283   2            lcd_curs(63);       // Cursor auf Position 1 setzen
 284   2            lcd_str(temp);      // LCD-Text Temperatur zu hoch
 285   2            break;              // Abschluss
 286   2          default:
 287   2            lcd_curs(31);       // Cursor auf Position 1 setzen
 288   2            lcd_str(def);       // LCD-Text FEHLER
 289   2            break;              // Abschluss
 290   2        }
 291   1      }
 292          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    640    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =    101    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.0.0   MAIN                                                              05/22/2022 08:09:42 PAGE 6   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
